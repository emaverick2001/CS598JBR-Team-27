{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    lower_case = [k.islower() for k in dict.keys()]\n    upper_case = [k.isupper() for k in dict.keys()]\n    return all(lower_case) or all(upper_case)\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # True\nprint(check_dict_case({})) # False\n\n# Note: The function is case sensitive. It will return False if the dictionary has keys that are in different cases.\n# For example, {\"Name\":\"John\", \"name\":\"John\"} will return False.\n# The function assumes that the dictionary keys are strings. If the dictionary keys are not strings, it"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n    return True\n\n\nprint(is_simple_power(1, 4))  # => true\nprint(is_simple_power(2, 2))  # => true\nprint(issimple_power(8, 2))  # => true\nprint(is_simple_power(3, 2))  # => false\nprint(is_simple_power(3, 1))  # => false\nprint(is_simple_power(5, 3))  # => false\nprint(is_simple_power(64, 2))  # => true\nprint(is_simple_power(729, 3))  # => true\nprint(is_simple_power(1024, 2))  # => true\nprint(is_simple_power(1594323, 3))  # => true\nprint(is_simple_power(248832, 2))  # => true\nprint(is_simple_power(12906496, 2))  # => true\nprint(is_simple_power(12906496, 3))  # => false\nprint(is_simple_power(12906496, 4)) "}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    s1, s2 = lst\n    s = s1 + s2\n    stack = []\n    for p in s:\n        if p == '(':\n            stack.append(p)\n        elif p == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if not stack else 'No'\n\n\nprint(match_parens(['()(', ')']))  # 'Yes'\nprint(match([')', ')']))  # 'No'\nprint(match_parens(['(', ')']))  # 'Yes'\nprint(match_parens(['(', '(']))  # 'No'\nprint(match_parens(['(', ')']))  # 'Yes'\nprint(match_parens(['(', ')']))  # 'Yes'\nprint(match_parens(['(', ')']))  # 'Yes'\nprint(match_parens(['(', ')']))  # 'Yes'\nprint(match_parens(['(', ')']))  # 'Yes'\nprint(match_parens(['(', ')']))  # 'Yes'\nprint(match_parens(['(', ')']))  # 'Yes'\nprint(match_parens(['(', ')']"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(n):\n        return sum(int(i) for i in str(abs(n)))\n\n    return sorted(nums, key=lambda n: (sum_of_digits(n), nums.index(n)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_order_by_points.py\nimport unittest\nfrom order_by_points import order_by_points\n\n\nclass TestOrderByPoints(unittest.TestCase):\n\n    def test_order_by_points(self):\n        self.assertEqual(order_by_points([1, 11, -1, -11, -12]), [-1, -11, 1, -12, 11])\n        self.assertEqual(order_by_points([]), [])\n        self.assertEqual(order.order_by_points([15, 21, 11, 7]), [7, 15, 21, 11])\n        self.assertEqual(order_by_points([15, 21, 11, 7]), [7, 15, 21, 11])\n        self.assertEqual(order_by_points([15, 21, 11, 7]), [7, 15, 21, 11])\n        self.assertEqual(order_by_points([15, 21,"}
{"task_id": "HumanEval/142", "completion": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    return sum\n\n\n\ndef sum_squares_v2(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n           "}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    # Write your code here\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr == sorted(arr[i:]+arr[:i]):\n                return True\n        return False\n\nprint(move_one_ball([3, 4, 5, 1, 2]))\nprint(move_one_ball([3, 5, 4, 1, 2]))\n\n# 1st test case: True\n# 2nd test case: False\n\n# The time complexity of this solution is O(n^2) as we are using a nested loop.\n# The space complexity is O(n) as we are"}
{"task_id": "HumanEval/39", "completion": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n\n    primes = []\n    fibs = [0, 1]\n    i = 2\n    while len(primes) < n:\n        fibs.append(fibs[-1] + fibs[-2])\n        if is_prime(fibs[-1]):\n            primes.append(fibs[-1])\n        i += 1\n\n    return primes[-1]\n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime checks if n is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_prime_fib.py\nimport unittest\nfrom prime_fib import prime_fib\n\n\nclass TestPrimeFib(unittest.TestCase):\n\n    def test_prime_fib(self):\n        self.assertEqual(prime_fib(1), 2)\n        self.assertEqual(prime_fib(2), 3)\n        self.assertEqual(prime_fib(3), 5)\n        self.assertEqual(prime_fib(4), 13)\n        self.assertEqual(prime_fib(5), 89)\n        self.assertEqual(prime_fib(6), 233)\n        self.assertEqual(prime"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    print(below_zero([1, 2, 3]))  # False\n    print(below_zero([1, 2, -4, 5]))  # True\n    print(below_zero([1, 2, 3, -5]))  # False\n    print(below_zero([100, -100, -200]))  # True\n    print(below_zero([-1, 1, -2, 2]))  # True\n    print(below_zero([10, -10, 10, -10]))  # False\n    print(below_zero([1, 2, 3, 4, 5]))  # False\n    print(below_zero([-1, -2, -3, -4, -5]))  # False\n    print(below_zero([100, 100, -200, -200]))  # False\n    print(below_zero([1, -1, 1, -1]))  # False\n    print(below_zero([10, 20, -30, 40]))  # False\n    print(below_zero([1, 2, 3, -5, 4]))  # True\n    print(below_zero([100, 200, -30"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for i in c:\n        s = s.replace(i, '')\n    return (s, s == s[::-1])\n\nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdef\", \"b\"))\nprint(reverse(\"abcdedcba\", \"ab\"))\n\n# 1. Replace all characters in s that are in c with nothing.\n# 2. Check if the result string is the same as its reverse.\n# 3. Return the result string and the check result.\n\n# The time complexity of this solution is O(n^2) because of the replace operation.\n# The space complexity is O(n) because we are storing the result string.\n\n# The replace operation is O(n^2) because it has to go through the string for each character in c.\n# The check for palindrome is O(n) because it has to go through the string once.\n# So, the total time complexity is O(n^2).\n\n# The space complexity is O(n) because we are storing the result string.\n# So, the total space complexity is O(n).\n\n# The time complexity of this solution is O(n^2) because of the replace operation.\n# The space complexity is O(n) because we are storing the result string.\n\n# The replace operation is O(n^2) because it has to go through"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Your code here\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n\n\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))  # should return 72\nprint(multiply(2020, 1851))  # should return 0\nprint(multiply(14, -15))  # should return 20\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Your code here\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n\n\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))  # should return 7"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    return [abs(s-g) if s != g else 0 for s, g in zip(game, guess)]\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n\n# 1st solution\ndef compare(game, guess):\n    return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]\n\n# 2nd solution\ndef compare(game, guess):\n    return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]\n\n# 3rd solution\ndef compare(game, guess):\n    return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]\n\n# 4th solution\ndef compare(game, guess):\n    return [abs(a-b) if a !"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    hex_num = [int(num, 16)]\n    prime_hex = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in hex_num:\n        while i:\n            if i % 16 in prime_hex:\n                count += 1\n            i //= 16\n    return count\n\nprint(hex_key(\"AB\")) # 1\nprint(hex_key(\"1077E\")) # 2\nprint(hex_key(\"ABED1A33\")) # 4\nprint(hex.hex_key(\""}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)\n\n\ndef mean_absolute_percentage_error(y_true: List[float], y_pred: List[float]) -> float:\n    \"\"\" For a given list of true values and predicted values, calculate Mean Absolute Percentage Error.\n    Mean Absolute Percentage Error is the average of the absolute percentage difference between the\n    predicted and actual values:\n    MAPE = [sum(|(y_true - y_pred) / y_true|) for y_true, y_pred in zip(y_true, y_pred)]\n    >>> mean_absolute_percentage_error([1.0, 2.0, 3.0, 4.0], [1.1, 1.9, 3.2, 3.8])\n    0.16666666666666666\n    \"\"\"\n    return sum(abs((y_true - y_pred) / y_true) for y_true, y_pred in zip(y_true, y_pred)) / len(y_true)\n\n\ndef mean_squared_error(y_true: List[float], y_pred: List[float]) - float:\n    \"\"\" For a given list of true values and predicted values, calculate Mean Squared Error.\n    Mean Squared Error is the average of the squares of the errors:\n    MSE = [("}
{"task_id": "HumanEval/36", "completion": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_fizz_buzz.py\nimport unittest\nfrom fizz_buzz import fizz_buzz\n\n\nclass TestFizzBuzz(unittest.TestCase):\n\n    def test_fizz_buzz(self):\n        self.assertEqual(fizz_buzz(50), 0)\n        self.assertEqual(fizz_buzz(78), 2)\n        self.assertEqual(fizz_buzz(79), 3)\n\n\nif __name__ == '__main__':\n    unittest.main()from django.contrib import admin\nfrom .models import Post, Comment\n\n# Register your models here.\n\n# Customize the admin interface\nclass PostAdmin(admin.ModelAdmin):\n    list_display = ['title', 'slug', 'publish', 'author', 'status']\n    list_filter = ['status', 'created', 'publish', 'author']\n    search_fields = ['title', 'body']\n    prepopulated_fields = {'slug': ('title',)}\n    raw_id_fields = ['author']\n    date_hierarchy = 'publish'\n    ordering = ['status', 'publish']\n\nclass CommentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'email', 'post', 'created', 'active']\n    list_filter = ['active', 'created"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # convert the number to binary and remove the '0b' part\n    binary = bin(N)[2:]\n    # sum the digits\n    total = sum(int(digit) for digit in binary)\n    # convert the sum to binary and remove the '0b' part\n    result = bin(total)[2:]\n    return result\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))\n\n# The output should be:\n# 1\n# 110\n# 1100\n\n# The function works by first converting the input number to binary and summing the digits. The sum is then converted back to binary and returned. The binary representation of the sum of the digits of the original number is the result.\n\n# The time complexity of this function is O(log N) because we are iterating over the number of digits in the binary representation of N. The space complexity is also O(log N) because we are storing the binary representation of N.\n\n# The function assumes that the input is a positive integer. If the input is not a positive integer, the function may not work as expected.\n\n# The function does not handle any exceptions that may occur during the execution. If an exception occurs, the function may crash or produce incorrect results.\n\n# The function does not check if the input is within the specified constraints. If the input is outside the specified constraints, the function may produce incorrect results or take an"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    for num in a:\n        mod_count[num % 3] += 1\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * mod_count[2] // 2\n    count += mod_count[2] * (mod[2] - 1) * (mod_count[2] - 2) // 6\n    return count\n\n\nprint(get_max_triples(5))\n\n# 1 3 7 13 21\n# 1 3 7 13 21\n# 1 3 7 13 21\n# 1 3 7 13 21\n# 1 3 7 13 21\n# 1 3 7 13 21\n# 1 3 7 13 21\n# 1 3 7 13 21\n# 1 3 7 13 "}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n    if len(txt) == 0 or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    return txt[-2] == ' '\n\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # False\nprint(check_if_last_char_is_a_letter(\"\")) # False\nprint(check_if_last_char_is_a_letter(\"a\")) # True\nprint(check_if_last_char_is_a_letter(\"a \")) # False\nprint(check_if_last_char_is_a_letter(\" a\")) # True\nprint(check_if_last_char_is_a_letter(\"1\")) # False\nprint(check_if_last_char_is_a_letter(\"1 \")) # False\nprint(check_if_last_char_is_a_letter(\" 1\")) # False\nprint(check_if_last_char_is_a_letter(\" 1 \")) # False\nprint(check_if_last_char_is_a_letter(\"1a\")) # False\nprint(check_if_"}
{"task_id": "HumanEval/64", "completion": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\n\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"Y\") == 1\n    assert vowels_count(\"y\") == 1\n    assert vowels_count(\"YoLo\") == 2\n    assert vowels_count(\"AEIOU\") == 5\n    assert vowels_count(\"Edgy\") == 2\n    assert vowels_count(\"sneezy\") == 3\n    assert vowels_count(\"dizzy\") == 2\n    assert vowels_count(\"brainy\") == 3\n    assert vowels_count(\"psychic\") == 3\n    assert vowels_count(\"psychicY\") == 4\n    assert vowels_count(\"psychicY\") == 4\n    assert vowels_count(\"psychic\") == 3\n    assert vowels_count(\"psychicY\") == 4\n    assert vowels_count(\"psychic\") == 3\n    assert vowels_count(\"psychicY\") == 4\n    assert vowels_count(\"psychic\") == 3\n    assert vowels_count(\"psychicY\") == 4\n    assert vowels_count(\""}
{"task_id": "HumanEval/143", "completion": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\n\nprint(words_in_sentence(\"This is a test\"))  # \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # \"go for\"\nprint(words_in_sentence(\"Python is a great programming language\"))  # \"is a great programming\"\nprint(words_in_sentence(\"I love solving problems\"))  # \"love solving problems\"\nprint(words_in_sentence(\"I am a student\"))  # \"am a\"\nprint(words_in_sentence(\"The quick brown fox jumps over the lazy dog\"))  # \"brown jumps over\"\nprint(words_in_sentence(\"She sells seashells on the seashore\"))  # \"sells seashells on\"\nprint(words))  # \"s\"\nprint(words_in_sentence(\"The quick brown fox jumps over the lazy dog\"))  # \"brown jumps over\"\nprint(words_in_"}
