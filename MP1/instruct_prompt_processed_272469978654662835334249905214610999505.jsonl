{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n\n    if not dict:\n        return False\n    lower_case = [k.islower() for k in dict.keys()]\n    upper_case = [k.isupper() for k in dict.keys()]\n    return all(lower_case) or all(upper_case)"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n    return True"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n\n    s1, s2 = lst\n    s = s1 + s2\n    stack = []\n    for p in s:\n        if p == '(':\n            stack.append(p)\n        elif p == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if not stack else 'No'\n\n\n\n\n\n\n\n\n\n\n\n\n\n']"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n\n    def sum_of_digits(n):\n        return sum(int(i) for i in str(abs(n)))\n\n    return sorted(nums, key=lambda n: (sum_of_digits(n), nums.index(n)))"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    return sum\n\n\n\ndef sum_squares_v2(lst):\n\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n\n\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr == sorted(arr[i:]+arr[:i]):\n                return True\n        return False"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n\n    primes = []\n    fibs = [0, 1]\n    i = 2\n    while len(primes) < n:\n        fibs.append(fibs[-1] + fibs[-2])\n        if is_prime(fibs[-1]):\n            primes.append(fibs[-1])\n        i += 1\n\n    return primes[-1]\n\n\ndef is_prime(n: int):\n\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n\n    for i in c:\n        s = s.replace(i, '')\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n\n\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n\n\n\n\n\n\n\n\ndef multiply(a, b):\n\n\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n\n    return [abs(s-g) if s != g else 0 for s, g in zip(game, guess)]\n\n\n\n\n\ndef compare(game, guess):\n    return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]\n\n\ndef compare(game, guess):\n    return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]\n\n\ndef compare(game, guess):\n    return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]\n\n\ndef compare(game, guess):\n    return [abs(a-b) if a !"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n\n    hex_num = [int(num, 16)]\n    prime_hex = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in hex_num:\n        while i:\n            if i % 16 in prime_hex:\n                count += 1\n            i //= 16\n    return count\n\n\n\n\nprint(hex.hex_key(\""}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)\n\n\ndef mean_absolute_percentage_error(y_true: List[float], y_pred: List[float]) -> float:\n\n    return sum(abs((y_true - y_pred) / y_true) for y_true, y_pred in zip(y_true, y_pred)) / len(y_true)\n\n\ndef mean_squared_error(y_true: List[float], y_pred: List[float]) - float:\n    \"\"\" For a given list of true values and predicted values, calculate Mean Squared Error.\n    Mean Squared Error is the average of the squares of the errors:\n    MSE = [("}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n\n\n    binary = bin(N)[2:]\n\n    total = sum(int(digit) for digit in binary)\n\n    result = bin(total)[2:]\n    return result"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(any_int(3, -2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    mod_count = [0] * 3\n    for num in a:\n        mod_count[num % 3] += 1\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * (mod_count[1] - 1) * mod_count[2] // 2\n    count += mod_count[2] * (mod[2] - 1) * (mod_count[2] - 2) // 6\n    return count"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n\n    if len(txt) == 0 or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    return txt[-2] == ' '\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(check_if_"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n\n    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\n\n\n\n\n\n\n\n\n\n\nprint(words_in_"}
