{"task_id": "HumanEval/95", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n\n\n### Response:\n```python\nimport pytest\n\ndef test_empty_dict():\n    assert check_case({}) == False\n\ndef test_single_uppercase_key():\n    assert check_case({'KEY': 'value'}) == True\n\ndef test_single_lowercase_key():\n    assert check_case({'key': 'value'}) == True\n\ndef test_mixed_case_keys():\n    assert check_case({'Key': 'value'}) == False\n\ndef test_multiple_keys():\n    assert check_case({'KEY': 'value', 'key': 'value'}) == False\n\ndef test_keys_with_numbers():\n    assert check_case({'KEY1': 'value', 'key2': 'value'}) == False\n\ndef test_keys_with_special_characters():\n    assert check_case({'KEY!': 'value', 'key@': 'value'}) == False\n\ndef test_keys_with_empty_string():\n    assert check_case({'': 'value', 'key': 'value'}) == False\n\ndef test_keys_with_none():\n    assert check_case({None: 'value', 'key': 'value'}) == False\n\ndef test_keys_with_negative_numbers():\n    assert check_case({-1: 'value', 'key': 'value'}) == False\n\ndef test_keys_with_zero():\n    assert check_case({0: 'value', 'key': 'value'}) == False\n\ndef test_keys_with_upper_and_lower_case():\n    assert check_case({'Key': 'value', 'key': 'value'}) == False\n\ndef test_keys_with_upper_and_mixed_case():\n    assert check_case({'Key': 'value', 'kEy': 'value'}) == False\n\ndef test_keys_with_lower_and_mixed_case():\n    assert check_case({'key': 'value', 'kEy': 'value'}) == False\n```\n", "coverage": 94.73684210526316}
{"task_id": "HumanEval/76", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n\n\n### Response:\n```python\nimport pytest\n\ndef is_power_of_n(n, x):\n    if (n == 1):\n        return (x == 1)\n    power = 1\n    while (power < x):\n        power = power * n\n    return (power == x)\n\ndef test_is_power_of_n():\n    assert is_power_of_n(2, 4) == True\n    assert is_power_of_n(2, 5) == False\n    assert is_power_of_n(3, 9) == True\n    assert is_power_of_n(3, 8) == False\n    assert is_power_of_n(1, 1) == True\n    assert is_power_of_n(1, 2) == False\n    assert is_power_of_n(0, 0) == True\n    assert is_power_of_n(0, 1) == False\n    assert is_power_of_n(2, 0) == True\n    assert is_power_of_n(2, -4) == False\n    assert is_power_of_n(-2, 4) == False\n    assert is_power_of_n(-2, -4) == True\n    assert is_power_of_n(None, None) == True\n    assert is_power_of_n(None, 0) == False\n    assert is_power_of_n(2, None) == False\n```\n", "coverage": 85.71428571428571}
{"task_id": "HumanEval/119", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n\n### Response:\n```python\nimport pytest\nfrom your_module import your_function  # replace with your actual module and function\n\ndef test_empty_input():\n    assert your_function([]) == 'No'\n\ndef test_single_element():\n    assert your_function(['(']) == 'Yes'\n    assert your_function([')']) == 'Yes'\n\ndef test_two_elements():\n    assert your_function(['(', ')']) == 'Yes'\n    assert your_function([')', '(']) == 'Yes'\n    assert your_function(['(', '(']) == 'No'\n    assert your_function([')', ')']) == 'Yes'\n\ndef test_three_elements():\n    assert your_function(['(', '(', ')']) == 'Yes'\n    assert your_function(['(', ')', '(']) == 'Yes'\n    assert your_function([')', '(', ')']) == 'Yes'\n    assert your_function([')', '(', '(']) == 'No'\n    assert your_function(['(', '(', ')', ')']) == 'Yes'\n    assert your_function(['(', ')', '(', ')']) == 'Yes'\n    assert your_function([')', '(', '(', ')']) == 'Yes'\n    assert your_function([')', ')', '(', '(']) == 'No'\n\ndef test_mixed_elements():\n    assert your_function(['(', '(', ')', ')', '(', ')']) == 'Yes'\n    assert your_function(['(', ')', '(', '(', ')', ')']) == 'Yes'\n    assert your_function([')', '(', '(', ')', '(', ')']) == 'Yes'\n    assert your_function([')', ')', '(', '(', ')', '(', ')']) == 'No'\n\ndef test_negative_cases():\n    assert your_function(['(', ')', '(', '(', ')', ')', ')']) == 'No'\n    assert your_function(['(', '(', '(', ')', ')', ')', ')']) == 'No'\n    assert your_function([')', '(', '(', '(', ')', ')', ')']) == 'No'\n    assert your_function([')', ')', '(', '(', '(', ')', ')', ')']) == 'No'\n\ndef test_boundary_cases():\n    assert your_function(['(', '(', '(', '(', ')', ')', ')', ')']) == 'Yes'\n    assert your_function(['(', '(', '(', ')', ')', '(', ')', ')']) == 'Yes'\n    assert your_function(['(', '(', ')', '(', ')', '(', ')', ')']) == 'Yes'\n    assert your_function(['(', ')', '(', ')', '(', ')', '(', ')']) == 'Yes'\n```\n", "coverage": 100.0}
{"task_id": "HumanEval/145", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n\n\n### Response:\n```python\nimport pytest\nfrom your_module import digits_sum\n\ndef test_empty_input():\n    assert digits_sum([]) == []\n\ndef test_single_digit():\n    assert digits_sum([1]) == [1]\n\ndef test_negative_numbers():\n    assert digits_sum([-1, -2, -3]) == [-1, -2, -3]\n\ndef test_zero():\n    assert digits_sum([0, 0, 0]) == [0, 0, 0]\n\ndef test_positive_numbers():\n    assert digits_sum([1, 2, 3]) == [1, 2, 3]\n\ndef test_positive_numbers_with_different_digits():\n    assert digits_sum([12, 23, 34]) == [12, 23, 34]\n\ndef test_positive_numbers_with_same_digits():\n    assert digits_sum([11, 22, 33]) == [11, 22, 33]\n\ndef test_mixed_positive_and_negative_numbers():\n    assert digits_sum([1, -2, 3]) == [-2, 1, 3]\n\ndef test_boundary_conditions():\n    assert digits_sum([10**9, -10**9, 0]) == [-10**9, 0, 10**9]\n\ndef test_large_numbers():\n    assert digits_sum([1234567890, 9876543210, 5555555555]) == [1234567890, 5555555555, 9876543210]\n\ndef test_none_input():\n    with pytest.raises(TypeError):\n        digits_sum(None)\n```\n", "coverage": 100.0}
{"task_id": "HumanEval/142", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\n\n### Response:\n```python\nimport pytest\n\ndef test_empty_input():\n    assert process_list([]) == 0\n\ndef test_zero_input():\n    assert process_list([0, 0, 0, 0]) == 0\n\ndef test_negative_input():\n    assert process_list([-1, -2, -3, -4]) == -10\n\ndef test_none_input():\n    assert process_list([None, None, None, None]) == 0\n\ndef test_normal_cases():\n    assert process_list([1, 2, 3, 4]) == 11\n    assert process_list([2, 3, 4, 5]) == 28\n    assert process_list([3, 4, 5, 6]) == 46\n\ndef test_edge_cases():\n    assert process_list([10, 10, 10, 10]) == 100\n    assert process_list([20, 20, 20, 20]) == 800\n    assert process_list([30, 30, 30, 30]) == 2700\n\ndef test_boundary_conditions():\n    assert process_list([100, 100, 100, 100]) == 10000\n    assert process_list([200, 200, 200, 200]) == 160000\n    assert process_list([300, 300, 300, 300]) == 270000\n\ndef test_all_execution_paths_and_branches():\n    assert process_list([1, 2, 3, 1]) == 5\n    assert process_list([2, 3, 4, 2]) == 15\n    assert process_list([3, 4, 5, 3]) == 33\n    assert process_list([1, 2, 3, 4]) == 11\n    assert process_list([2, 3, 4, 5]) == 28\n    assert process_list([3, 4, 5, 6]) == 46\n    assert process_list([1, 2, 3, 2]) == 9\n    assert process_list([2, 3, 4, 3]) == 27\n    assert process_list([3, 4, 5, 4]) == 64\n```\n", "coverage": 88.88888888888889}
{"task_id": "HumanEval/109", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n\n\n### Response:\n```python\nimport pytest\nfrom your_module import your_function  # replace with your actual module and function\n\ndef test_empty_input():\n    assert your_function([]) == True\n\ndef test_single_element():\n    assert your_function([5]) == True\n\ndef test_sorted_array():\n    assert your_function([1, 2, 3, 4, 5]) == True\n\ndef test_reversed_array():\n    assert your_function([5, 4, 3, 2, 1]) == True\n\ndef test_negative_numbers():\n    assert your_function([-5, -4, -3, -2, -1]) == True\n\ndef test_zero():\n    assert your_function([0, 0, 0, 0]) == True\n\ndef test_negative_positive_mixed():\n    assert your_function([-5, -4, 3, 2, 1]) == True\n\ndef test_duplicates():\n    assert your_function([1, 2, 2, 1]) == True\n\ndef test_non_rotation():\n    assert your_function([1, 2, 3, 4]) == False\n\ndef test_large_input():\n    large_array = list(range(1, 10**6 + 1))\n    assert your_function(large_array) == True\n\ndef test_large_input_reversed():\n    large_array = list(range(10**6, 0, -1))\n    assert your_function(large_array) == True\n```\n", "coverage": 100.0}
{"task_id": "HumanEval/39", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\n\n### Response:\n```python\nimport pytest\nfrom your_module import is_prime\n\ndef test_is_prime_negative():\n    assert not is_prime(-1)\n    assert not is_prime(-10)\n\ndef test_is_prime_zero_and_one():\n    assert not is_prime(0)\n    assert not is_prime(1)\n\ndef test_is_prime_small_numbers():\n    assert is_prime(2)\n    assert is_prime(3)\n    assert not is_prime(4)\n    assert is_prime(5)\n\ndef test_is_prime_large_numbers():\n    assert not is_prime(15485863)\n    assert is_prime(15485867)\n\ndef test_is_prime_edge_cases():\n    assert not is_prime(2**31 - 1)\n    assert not is_prime(2**63 - 1)\n\ndef test_is_prime_boundary_conditions():\n    assert is_prime(2**31)\n    assert is_prime(2**63)\n\ndef test_is_prime_normal_cases():\n    assert is_prime(101)\n    assert not is_prime(100)\n\ndef test_is_prime_large_numbers_2():\n    assert is_prime(1000000007)\n    assert not is_prime(1000000008)\n\ndef test_is_prime_large_numbers_3():\n    assert is_primecoverage": 6.25}
{"task_id": "HumanEval/3", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\n\n### Response:\n```python\nimport pytest\n\ndef check_balance(operations):\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\ndef test_empty_input():\n    assert check_balance([]) == False\n\ndef test_zero():\n    assert check_balance([0]) == False\n\ndef test_negative():\n    assert check_balance([-1]) == True\n\ndef test_none():\n    with pytest.raises(TypeError):\n        check_balance(None)\n\ndef test_boundary_conditions():\n    assert check_balance([1000000]) == False\n\ndef test_normal_cases():\n    assert check_balance([1, 2, 3]) == False\n\ndef test_edge_cases():\n    assert check_balance([1, -2, 3]) == True\n\ndef test_multiple_operations():\n    assert check_balance([1, -2, 3, 4, -5, 6]) == True\n\ndef test_large_numbers():\n    assert check_balance([1000000, -2000000, 3000000]) == False\n\ndef test_negative_numbers():\n    assert check_balance([-1, -2, -3]) == True\n\ndef test_zero_balance():\n    assert check_balance([1, -1]) == False\n\ndef test_negative_balance():\n    assert check_balance([1, -2, -3]) == True\n\ndef test_positive_balance():\n    assert check_balance([1, 2, 3]) == False\n```\n", "coverage": 100.0}
{"task_id": "HumanEval/112", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\n### Response:\n```python\nimport pytest\nfrom your_module import your_function  # replace with your actual module and function\n\ndef test_empty_input():\n    s = \"\"\n    c = \"\"\n    result = your_function(s, c)\n    assert result == (\"\", True)\n\ndef test_no_char_removed():\n    s = \"hello\"\n    c = \"world\"\n    result = your_function(s, c)\n    assert result == (\"hello\", False)\n\ndef test_all_char_removed():\n    s = \"hello\"\n    c = \"helo\"\n    result = your_function(s, c)\n    assert result == (\"\", True)\n\ndef test_one_char_removed():\n    s = \"hello\"\n    c = \"eo\"\n    result = your_function(s, c)\n    assert result == (\"hl\", False)\n\ndef test_zero():\n    s = \"hello\"\n    c = \"0\"\n    result = your_function(s, c)\n    assert result == (\"hello\", False)\n\ndef test_negative_numbers():\n    s = \"hello\"\n    c = \"-1\"\n    result = your_function(s, c)\n    assert result == (\"hello\", False)\n\ndef test_none():\n    s = \"hello\"\n    c = None\n    result = your_function(s, c)\n    assert result == (\"hello\", False)\n\ndef test_boundary_conditions():\n    s = \"a\" * 1000\n    c = \"a\" * 999\n    result = your_function(s, c)\n    assert result == (\"a\", True)\n\ndef test_normal_cases():\n    s = \"hello\"\n    c = \"eo\"\n    result = your_function(s, c)\n    assert result == (\"hl\", False)\n\ndef test_large_input():\n    s = \"a\" * 1000000\n    c = \"a\" * 500000\n    result = your_function(s, c)\n    assert result == (\"a\" * 500000, True)\n\ndef test_large_input_no_char_removed():\n    s = \"a\" * 1000000\n    c = \"\"\n    result = your_function(s, c)\n    assert result == (\"a\" * 1000000, True)\n```\n", "coverage": 33.333333333333336}
{"task_id": "HumanEval/97", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    return abs(a % 10) * abs(b % 10)\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    return abs(a % 10) * abs(b % 10)\n\n\n### Response:\n```python\nimport pytest\n\ndef test_positive_positive():\n    assert abs(15 % 10) * abs(20 % 10) == 100\n\ndef test_positive_negative():\n    assert abs(15 % 10) * abs(-20 % 10) == 100\n\ndef test_negative_positive():\n    assert abs(-15 % 10) * abs(20 % 10) == 100\n\ndef test_negative_negative():\n    assert abs(-15 % 10) * abs(-20 % 10) == 100\n\ndef test_zero_positive():\n    assert abs(0 % 10) * abs(20 % 10) == 0\n\ndef test_positive_zero():\n    assert abs(15 % 10) * abs(0 % 10) == 0\n\ndef test_zero_zero():\n    assert abs(0 % 10) * abs(0 % 10) == 0\n\ndef test_zero_negative():\n    assert abs(0 % 10) * abs(-20 % 10) == 0\n\ndef test_negative_zero():\n    assert abs(-15 % 10) * abs(0 % 10) == 0\n\ndef test_large_positive():\n    assert abs(1234567890 % 10) * abs(9876543210 % 10) == 9671406440\n\ndef test_large_negative():\n    assert abs(-1234567890 % 10) * abs(9876543210 % 10) == 9671406440\n\ndef test_negative_large():\n    assert abs(-1234567890 % 10) * abs(-9876543210 % 10) == 9671406440\n\ndef test_large_zero():\n    assert abs(1234567890 % 10) * abs(0 % 10) == 0\n\ndef test_zero_large():\n    assert abs(0 % 10) * abs(9876543210 % 10) == 0\n\ndef test_large_large():\n    assert abs(1234567890 % 10) * abs(9876543210 % 10) == 9671406440\n```\n", "coverage": 50.0}
{"task_id": "HumanEval/152", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    return [abs(x-y) for x,y in zip(game,guess)]\n\n\n### Response:\n```python\nimport pytest\nfrom your_module import your_function  # replace with your actual module and function\n\ndef test_empty_inputs():\n    assert your_function([], []) == []\n\ndef test_zero_values():\n    assert your_function([0, 0, 0], [0, 0, 0]) == [0, 0, 0]\n\ndef test_negative_numbers():\n    assert your_function([-1, -2, -3], [1, 2, 3]) == [2, 4, 6]\n\ndef test_none_values():\n    with pytest.raises(TypeError):\n        your_function(None, None)\n\ndef test_boundary_conditions():\n    assert your_function([10, 10, 10], [0, 5, 10]) == [10, 5, 10]\n\ndef test_normal_cases():\n    assert your_function([5, 10, 15], [0, 5, 10]) == [5, 5, 15]\n\ndef test_unequal_lengths():\n    assert your_function([1, 2, 3], [1, 2]) == [0, 1]\n\ndef test_single_element():\n    assert your_function([1], [1]) == [0]\n\ndef test_large_inputs():\n    game = list(range(1, 1001))\n    guess = list(range(1001, 2001))\n    assert your_function(game, guess) == [1000]*1000\n\ndef test_large_negative_inputs():\n    game = list(range(-1000, 0))\n    guess = list(range(-999, 0))\n    assert your_function(game, guess) == [1]*1000\n\ndef test_mixed_negative_and_positive_inputs():\n    game = [-1, 2, -3, 4]\n    guess = [1, -2, 3, -4]\n    assert your_function(game, guess) == [2, 5, 7, 8]\n```\n", "coverage": 100.0}
{"task_id": "HumanEval/78", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n\n### Response:\n```python\nimport pytest\n\ndef count_primes(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\ndef test_count_primes():\n    assert count_primes('2357BD') == 6\n    assert count_primes('2357B') == 5\n    assert count_primes('2357BD2357BD') == 12\n    assert count_primes('') == 0\n    assert count_primes('0148623579') == 3\n    assert count_primes('-2357BD') == 0\n    assert count_primes('None') == 0\n    assert count_primes('2357BD2357BD2357BD2357BD') == 16\n    assert count_primes('2357BD2357BD2357BD2357BD2357BD2357BD') == 20\n    assert count_primes('2357BD2357BD2357BD2357BD2357BD2357BD2357BD2357BD2357BD') == 24\n    assert count_primescoverage": 14.285714285714286}
{"task_id": "HumanEval/4", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\n### Response:\n```python\nimport pytest\nfrom your_module import function_to_test  # replace with your actual module and function\n\ndef test_empty_input():\n    assert function_to_test([]) is None\n\ndef test_single_element():\n    assert function_to_test([5]) == 0\n\ndef test_negative_numbers():\n    assert function_to_test([-1, -2, -3]) == 2\n\ndef test_zero():\n    assert function_to_test([0, 0, 0]) == 0\n\ndef test_positive_numbers():\n    assert function_to_test([1, 2, 3]) == 1\n\ndef test_mixed_numbers():\n    assert function_to_test([1, -2, 3]) == 2\n\ndef test_large_numbers():\n    assert function_to_test([1e6, 2e6, 3e6]) == 1e6\n\ndef test_small_numbers():\n    assert function_to_test([1e-6, 2e-6, 3e-6]) == 1e-6\n\ndef test_none_input():\n    assert function_to_test(None) is None\n\ndef test_non_numeric_input():\n    with pytest.raises(TypeError):\n        function_to_test(['a', 'b', 'c'])\n\ndef test_large_input():\n    numbers = list(range(1, 1001))\n    assert function_to_test(numbers) == 500.5\n\ndef test_small_input():\n    numbers = list(range(1, 11))\n    assert function_to_test(numbers) == 3.3027756377319946\n```\n", "coverage": 100.0}
{"task_id": "HumanEval/36", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n\n\n### Response:\n```python\nimport pytest\nfrom your_module import your_function  # replace with your actual module and function\n\ndef test_empty_input():\n    assert your_function(0) == 0\n\ndef test_negative_input():\n    assert your_function(-1) == 0\n\ndef test_zero():\n    assert your_function(0) == 0\n\ndef test_small_input():\n    assert your_function(10) == 1  # '7' appears once in 0, 7, 10\n\ndef test_large_input():\n    assert your_function(100) == 5  # '7' appears five times in 0, 7, 10, 17, 47, 70, 77, 84, 91, 98\n\ndef test_boundary_input():\n    assert your_function(1000) == 11  # '7' appears eleven times in numbers that are multiples of 11 or 13\n\ndef test_normal_input():\n    assert your_function(10000) == 153  # '7' appears 153 times in numbers that are multiples of 11 or 13\n\ndef test_none_input():\n    with pytest.raises(TypeError):\n        your_function(None)\n\ndef test_string_input():\n    with pytest.raises(TypeError):\n        your_function('abc')\n\ndef test_list_input():\n    with pytest.raises(TypeError):\n        your_function([1, 2, 3])\n\ndef test_dict_input():\n    with pytest.raises(TypeError):\n        your_function({'a': 1, 'b': 2})\n\ndef test_float_input():\n    with pytest.raises(TypeError):\n        your_function(1.23)\n\ndef test_negative_float_input():\n    assert your_function(-1.23) == 0\n\ndef test_negative_large_input():\n    assert your_function(-10000) == 0\n```\n", "coverage": 100.0}
{"task_id": "HumanEval/84", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    return bin(sum(int(i) for i in str(N)))[2:]\n\n\n### Response:\n```python\nimport pytest\n\ndef sum_and_bin(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n\ndef test_sum_and_bin():\n    assert sum_and_bin(12345) == '110101'\n    assert sum_and_bin(9876543210) == '11110011010101011010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101", "coverage": 50.0}
{"task_id": "HumanEval/92", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\n\n### Response:\n```python\nimport pytest\n\ndef test_valid_inputs():\n    assert is_valid_triangle_sides(3, 4, 5) == True\n    assert is_valid_triangle_sides(5, 12, 13) == True\n    assert is_valid_triangle_sides(6, 8, 10) == True\n    assert is_valid_triangle_sides(7, 24, 25) == True\n    assert is_valid_triangle_sides(8, 15, 17) == True\n    assert is_valid_triangle_sides(9, 21, 25) == True\n    assert is_valid_triangle_sides(10, 24, 26) == True\n    assert is_valid_triangle_sides(12, 15, 20) == True\n    assert is_valid_triangle_sides(13, 26, 29) == True\n    assert is_valid_triangle_sides(15, 20, 25) == True\n\ndef test_invalid_inputs():\n    assert is_valid_triangle_sides(1, 2, 3) == False\n    assert is_valid_triangle_sides(2, 3, 4) == False\n    assert is_valid_triangle_sides(3, 4, 6) == False\n    assert is_valid_triangle_sides(3, 5, 7) == False\n    assert is_valid_triangle_sides(4, 5, 9) == False\n    assert is_valid_triangle_sides(4, 6, 8) == False\n    assert is_valid_triangle_sides(5, 6, 9) == False\n    assert is_valid_triangle_sides(5, 7, 10) == False\n    assert is_valid_triangle_sides(6, 7, 11) == False\n    assert is_valid_triangle_sides(6, 8, 12) == False\n\ndef test_non_integer_inputs():\n    assert is_valid_triangle_sides(1.5, 2, 3) == False\n    assert is_valid_triangle_sides(2, 3.5, 4) == False\n    assert is_valid_triangle_sides(3, 4, 6.5) == False\n    assert is_valid_triangle_sides(3.5, 5, 7) == False\n    assert is_valid_triangle_sides(4, 5.5, 9) == False\n    assert is_valid_triangle_sides(4.5, 6, 8) == False\n    assert is_valid_triangle_sides(5, 6.5, 9) == False\n    assert is_valid_triangle_sides(5.5, 7, 10) == False\n    assert is_valid_triangle_sides(6, 7.5, 11) == False\n    assert is_valid_triangle_sides(6.5, 8, 12) == False\n\ndef test_negative_inputs():\n    assert is_valid_triangle_sides(-1, 2, 3) == False\n    assert is_valid_triangle_sides(1, -2, 3) == False\n    assert is_valid_triangle_sides(1, 2, -3) == False\n    assert is_valid_triangle_sides(-1, -2, 3) == False\n    assert is_valid_triangle_sides(-1, 2, -3) == False\n    assert is_valid_triangle_sides(1, -2, -3) == False\n    assert is_valid_triangle_sides(-1, -2, -3) == False\n\ndef test_zero_inputs():\n    assert is_valid_triangle_sides(0, 2, 3) == False\n    assert is_valid_triangle_sides(1, 0, 3) == False\n    assert is_valid_triangle_sides(1, 2, 0) == False\n    assert is_valid_triangle_sides(0, 0, 3) == False\n    assert is_valid_triangle_sides(0, 2,", "coverage": 16.666666666666668}
{"task_id": "HumanEval/147", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n\n\n### Response:\n```python\nimport pytest\nfrom your_module import your_function  # replace with your actual module and function\n\ndef test_empty_input():\n    assert your_function(0) == 0\n\ndef test_negative_input():\n    assert your_function(-5) == 0\n\ndef test_none_input():\n    with pytest.raises(TypeError):\n        your_function(None)\n\ndef test_zero_input():\n    assert your_function(0) == 0\n\ndef test_small_input():\n    assert your_function(5) == 0\n\ndef test_normal_input():\n    assert your_function(10) == 0\n\ndef test_large_input():\n    assert your_function(100) == 0\n\ndef test_boundary_input():\n    assert your_function(1000) == 0\n\ndef test_edge_case_1():\n    assert your_function(2) == 0\n\ndef test_edge_case_2():\n    assert your_function(3) == 0\n\ndef test_edge_case_3():\n    assert your_function(4) == 0\n\ndef test_edge_case_4():\n    assert your_function(5) == 0\n\ndef test_edge_case_5():\n    assert your_function(6) == 0\n\ndef test_edge_case_6():\n    assert your_function(7) == 0\n\ndef test_edge_case_7():\n    assert your_function(8) == 0\n\ndef test_edge_case_8():\n    assert your_function(9) == 0\n\ndef test_edge_case_9():\n    assert your_function(10) == 0\n\ndef test_edge_case_10():\n    assert your_function(11) == 0\n\ndef test_edge_case_11():\n    assert your_function(12) == 0\n\ndef test_edge_case_12():\n    assert your_function(13) == 0\n\ndef test_edge_case_13():\n    assert your_function(14) == 0\n\ndef test_edge_case_14():\n    assert your_function(15) == 0\n\ndef test_edge_case_15():\n    assert your_function(16) == 0\n```\n", "coverage": 0.0}
{"task_id": "HumanEval/134", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\n\n### Response:\nSure, here is a comprehensive pytest test suite for the given code:\n\n```python\nimport pytest\n\ndef check_last_char(txt):\n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n\ndef test_empty_input():\n    assert check_last_char(\"\") == False\n\ndef test_zero():\n    assert check_last_char(\"0\") == False\n\ndef test_negative_numbers():\n    assert check_last_char(\"-1\") == False\n\ndef test_none():\n    assert check_last_char(None) == False\n\ndef test_uppercase_letters():\n    assert check_last_char(\"HELLO WORLD\") == False\n\ndef test_lowercase_letters():\n    assert check_last_char(\"hello world\") == True\n\ndef test_numbers_in_middle():\n    assert check_last_char(\"hello 123 world\") == False\n\ndef test_numbers_at_end():\n    assert check_last_char(\"hello world123\") == False\n\ndef test_special_characters():\n    assert check_last_char(\"hello world!@#\") == False\n\ndef test_multiple_spaces():\n    assert check_last_char(\"hello  world\") == False\n\ndef test_boundary_conditions():\n    assert check_last_char(\"a\") == True\n    assert check_last_char(\"z\") == True\n    assert check_last_char(\"A\") == False\n    assert check_last_char(\"Z\") == False\n\ndef test_normal_cases():\n    assert check_last_char(\"hello world\") == False\n    assert check_last_char(\"hello world a\") == True\n    assert check_last_char(\"hello world z\") == True\n```\n\nThis suite covers all execution paths and branches, including edge cases, boundary conditions, and normal cases. It also tests the function with inputs of different types and lengths.\n", "coverage": 100.0}
{"task_id": "HumanEval/64", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n\n\n### Response:\n```python\nimport pytest\n\ndef count_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s and (s[-1] == 'y' or s[-1] == 'Y'):\n        n_vowels += 1\n    return n_vowels\n\ndef test_count_vowels():\n    assert count_vowels('') == 0\n    assert count_vowels('a') == 1\n    assert count_vowels('Y') == 1\n    assert count_vowels('Hello') == 2\n    assert count_vowels('Bye') == 2\n    assert count_vowels('Python') == 2\n    assert count_vowels('Aeiou') == 5\n    assert count_vowels('y') == 1\n    assert count_vowels('Yo') == 1\n    assert count_vowels('123') == 0\n    assert count_vowels('0') == 0\n    assert count_vowels('None') == 1\n    assert count_vowels('negative') == 3\n    assert count_vowels('boundary') == 3\n    assert count_vowels('normal') == 2\n    assert count_vowels('diverse') == 3\n    assert count_vowels('100%') == 1\n```\n", "coverage": 71.42857142857143}
{"task_id": "HumanEval/143", "prompt": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n### Response:\n", "response": "You are an AI programming assistant, utilizing the DeepSeek Coder model, developed by DeepSeek Company, and you only answer questions related to computer science. For politically sensitive questions, security and privacy issues, and other non-computer science questions, you will refuse to answer.\n\n### Instruction:\nGenerate a comprehensive pytest test suite for the following code.\n\nRequirements:\n1. Generate at least 10-15 diverse test cases\n2. Cover ALL execution paths and branches\n3. Test edge cases: empty inputs, zero, negative numbers, None\n4. Test boundary conditions\n5. Test normal cases\n6. Use 'test_' prefix for all test functions\n7. Aim for 100% code coverage\n\nOnly output Python pytest code. No explanations.\n\nCode to test:\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n\n### Response:\n```python\nimport pytest\n\ndef test_single_letter_words():\n    assert process_words(\"a\") == \"\"\n\ndef test_two_letter_words():\n    assert process_words(\"hi\") == \"hi\"\n\ndef test_multiple_letter_words():\n    assert process_words(\"hello world\") == \"hello\"\n\ndef test_empty_string():\n    assert process_words(\"\") == \"\"\n\ndef test_none():\n    assert process_words(None) == \"\"\n\ndef test_zero_length_words():\n    assert process_words(\"aabbcc\") == \"\"\n\ndef test_negative_length_words():\n    assert process_words(\"abcd\") == \"abcd\"\n\ndef test_negative_numbers():\n    assert process_words(\"1234567890\") == \"1234567890\"\n\ndef test_boundary_conditions():\n    assert process_words(\"abcd abcdef\") == \"abcd\"\n\ndef test_normal_cases():\n    assert process_words(\"hello world this is a test\") == \"hello world this is a\"\n\ndef test_edge_cases():\n    assert process_words(\"a b c d e\") == \"a b c d e\"\n\ndef test_all_execution_paths():\n    assert process_words(\"ab abc abcd\") == \"ab\"\n```\n", "coverage": 100.0}
