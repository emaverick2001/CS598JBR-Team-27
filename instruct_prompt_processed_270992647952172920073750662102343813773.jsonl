{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - ):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n\n    return text == text[::-1]\n\n\ndef is_prime(n: int):\n\n    if n < 2:\n        return False\n    for i in range(2, int(n ** rt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_even(n: int):\n\n    return n % 2 == 0\n\n\ndef is_odd(n: int):\n\n    return n % 2 != 0\n\n\ndef is_leap_year(year: int):\n\n    if year % 4 != 0:\n        return False\n    elif year % 100 != 0:\n        return True\n    elif year % 40"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n\n    return [i + 1 for i in l]\n\n\ndef decr_list(l: list):\n\n    return [i - 1 for i in l]\n\n\ndef sum_list(l: list):\n\n    return sum(l)\n\n\ndef avg_list(l: list):\n\n    return sum(l) / len(l)\n\n\ndef min_list(l: list):\n    \"\"\"Return minimum element in list.\n    >>> min_list([1, 2, 3])"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n\n    max_num = numbers[0]\n    max_list = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        max_list.append(max_num)\n    return max_list\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n\n    min_num = numbers[0]\n    min_list = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        min_list.append(min_num)\n    return min_list\n\ndef max_profit(prices: List[int]) -> int:\n\n    if not prices:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        elif price - min_price > max_profit:\n            max_profit = price - min_price\n    return max_profit"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n\n\ndef is_prime(n: int) -> bool:\n\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_factors(n: int) -> list:\n\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\ndef gcd(a: int, b: int) -> int:\n\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) - int:\n\n    return a * b // gcd(a, b)\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Compute the"}
{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n\n\n\n\n\n\nprint(exchange([1, 2, 3, 4], [1,"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - ]:\n            return i\n    return -1\n\n\ndef can_arrange(arr):\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n\ndef can_arrange(arr):\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n\n    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 <= total_chars1:\n        return lst2\n\n\n\n\n\n\n\n\n\ndef total_match(lst1, lst2):\n    if sum(len(i) for i in lst1) < sum(len(i) for i in lst2):\n        return lst1\n    else:\n        return lst2\n\n\nprint(total_match(['hi"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint(is_happy('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4])\n\n    return fib[n]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n\n    return [i for i in l if i > 0]\n\n\ndef get_even(l: list):\n\n    return [i for i in l if i % 2 == 0]\n\n\ndef get_odd(l: list):\n\n    return [i for i in l if i % 2 != 0]\n\n\ndef get_palindromes(l: list):\n    \"\"\"Return only palindromes in the list.\n    >>> get_palindromes(['121', '12321', '123321'])\n    ['121', '12321']\n    >>> get_palindromes(['121', '12321', '12332"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n\n    even_index_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = l[:]\n    for i in range(0, len(l), 2):\n        result[i] = even_index_values.pop(0)\n    return result\n\n\ndef main():\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"largest coefficient must not be zero\")\n\n\n    x = 0\n    while abs(poly(xs, x)) > 1e-6:\n        x = x - poly(xs, x) / poly([coeff * i for i, coeff in enumerate(xs)], x)\n    return x"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[start: i+1])\n    return groups"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n\n    return x + y\n\n\ndef subtract(x: int, y: int):\n\n    return x - y\n\n\ndef multiply(x: int, y: int):\n\n    return x * y\n\n\ndef divide(x: int, y: int):\n\n    if y == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return x // y\n\n\ndef power(x: int, y: int):\n\n    return x ** y\n\n\ndef square_root(x: int):\n\n    return x ** 0.5\n\n\ndef cube_root(x: int):\n\n    return x ** (1 / 3)\n\n\ndef factorial(x: int):\n\n    if"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - ] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef mode(l: list):\n\n    counts = {i: l.count(i) for i in l}\n    return max(counts, key=counts.get)\n\n\ndef mean(l: list):\n\n    return sum(l) / len(l)\n\n\ndef variance(l: list):\n\n    m = mean(l)\n    return sum((i - m) ** 2 for i in l) / len(l)\n\n\ndef standard_deviation(l: list):\n    \"\"\"Return standard deviation of elements in the list l.\n    >>> standard_deviation([1, 2, 3, 4,"}
